{
    "posts": [
        {
            "title": "Class Topic: Functions",
            "date": "29 November 2017",
            "content": "<article> <section> <h4>SOLID Principles -- Single Responsiblity</h4> <p>Functions that do one thing, that have one clear responsibility. Err on the side of smaller functions.</p> <h5>'S' Check List</h5> <ul> <li>Don't have functions that would have a name addElementsAndDeleteElements. Break into more than one.</li> <li>Are there any useful parts that can be extracted?</li> <li>Can another funciton be resued here?</li> </ul> <p class='question'>Do more thinking on: breaking down a funciton into multiple functions to give them descriptive names to make the code more readable vs. breaking it down only to resuable code junks.</p> </section> <section> <h4>Arrow Functions</h4> <p>These have always confused me when I have seen them. They are shorthand for anonymous functions and changes what <i>this</i> means in their scope.</p> <pre class='code'>function(x){return x+1;} //is the same as x => x + 1; </pre> <p>I have seen these before in find functions. Array.find(x => x > 5). Previously, these did not make sense. .find feeds in an argument to x, an element, and then it returns if x > 5.</p> </section> <section> <h4>Bubbling</h4> <p>When an event happens (whatever that means) it is sent up the DOM tree, moving from parent to parent. Every parent can have a listener and hear an event.</p> <p>event.target = the elemtent clicked on. event.currentTarget = element that listener is on.</p> <p>This has a lot of potential to usee when dealing with lots of buttons. The element above them holds the listener, not each button. Will have to do more research into the best ways to implement this.</p> </section> <section> <h4>Hoisting</h4> <p>Javascript sifts through the script and moves var and function to top of the file. Only the declaration is hoisted--it sets aside a data slot for their refrence name, but it does not assign a value.</p> </section> <section> <h4>Random</h4> <p>Order functions that will be called in another function before the function that calls them. This makes it easier to read for someone looking at the code for the first time.</p> <pre class='code'>function1(){}function2(){}callFunctions(){function1();function2();} </pre> </section> <section> <h4>Hotkeys</h4> <h5>VS Code</h5> <ul> <li>alt + left/right arrow keys = move between tabs</li> <li>alt + cntrl + left/right arrow keys = switch tab to other view. </li> <li>alt + up/down arrow = move line of code up /down in document.</li> </ul> <h5>Google Chrome</h5> <ul> <li>cntrl + tab = forward tab</li> <li>cntrl + shift + tab = backward tab</li> <li>ctrl + w = close tab</li> </ul> </section>"
        },
        {
            "title": "Class Topic: Refactoring Functions",  
            "date": "30 November 2017",
            "content": "<article> <section> <h4>Best Practices Production Code</h4> <ul> <li>Remove commented out code on PR.</li> <li>Don't include console logs on PR.</li> </ul> </section> <section> <h4>Javascript Tip</h4> <p>.innerHTML wipes the html. .textContent will modify the text of that HTML, without wiping it and starting new.</p> <h4>Javascript Dynamic Variables</h4> <pre class='code'>let variables = [['x', 5],['y', 3],['z', 1]];for(let i = 0; i < variables.length; i++){//Creates variables dynamically.this[variables[i][0]] = variables[i][1];}console.log('x', x);//5console.log('y', y);//3console.log('z', z);//1let a = 3;console.log('a', this['a']);//Undefined//let x = 3; If you run this down here, it says x is undefined above. Maybe because x is being hoisted here, and then ???? </pre class='code'> </section> <section> <h4>Hotkeys</h4> <h5>VS Code</h5> <ul> <li>ctrl + d = select whole word.</li> <li>alt + up/down arrows = move line</li> </ul> <h5>Google Chrome</h5> <ul> <li>ctrl + shift + c = Inspector</li> </ul> </section> <section> <h4>Refactoring Code</h4> <h5>UI Down</h5> <p>Look at your UI. How many inputs are there? That amount will give you the skeleton to how many functions you will need. Of course, your code will grow and change as you write it, but this can give you a basic idea about what you will need.</p> </section> <section> <h4>Questions</h4> <ul> <li>Javascript: Can there be multiple <i>events</i> happen at the same time? If event can always be accessed, then how are two events proccessed at the same time? Is there another way to access events?</li> <li>HTML: When are custom attributes okay to use? Seems like putting data in HTML would be bad practice.</li> <li>CSS: When/how does the browser handle CSS? If javascript changes css, does it then 'rerun' it?</li>s </ul> </section></article>"
        },
        {
            "title": "Class Topic: Javascript Modules & IIFE",
            "date": "4 December 2017",
            "content":" <article> <section> <h4>Javascript Gold</h4> <p>Another student and a TA were working on a project for a while, and they figured out you can label a for loop (using similar syntax to a Javascript object). One would be able to break out of an above loop while in a nested loop. You can also continue. </p> <h5>Break Example</h5> <pre> myForLoop: for (let i = 0; i < 5; i ++){ if(i === 2){ break myForLoop; } console.log(i); } </pre> <h5>Continue Example</h5> <p>I wonder how continue and break would differ in the example below. After running them, it looks like <i>continue</i> goes back up to the top of the for loop that it is directed to and increments it, while <i>break</i> stops the the current loop and continues onto the code after it.</p> <pre> myForLoop: for (let i = 0; i < 5; i++){ if(i === 2){ for(let x = 0; x < 7; x++){ if(x === 3){ continue myForLoop; } console.log('x', x); } } console.log('i', i); } // Output // i 0 // i 1 // x 0 // x 1 // x 2 // i 3 // i 4 </pre> <pre> myForLoop: for (let i = 0; i < 5; i++){ if(i === 2){ for(let x = 0; x < 7; x++){ if(x === 3){ break; } console.log('x', x); } } console.log('i', i); } // Output // i 0 // i 1 // x 0 // x 1 // x 2 // i 2 // i 3 // i 4 </pre> <h4><a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label'>MDN Docs Example</a></h4> <pre> let i, j; loop1: for (i = 0; i < 3; i++) { //The first for statement is labeled 'loop1' loop2: for (j = 0; j < 3; j++) { //The second for statement is labeled 'loop2' if (i === 1 && j === 1) { break loop1; } console.log('i = ' + i + ', j = ' + j); } } // Output is: // 'i = 0, j = 0' // 'i = 0, j = 1' // 'i = 0, j = 2' // 'i = 1, j = 0' // Notice the difference with the previous continue example</pre> </section> <section> <h4>Annoying Things Encountered</h4> <p>Learned that addEventListener (at least in the xample below) does not take arrow functions. It will take anonymous functions, just not arrow functions. I'm probably missing something.</p> <pre> function loadData(animal, outputId){ const xhr = new XMLHttpRequest(); xhr.open('GET', `${animal}Products.json`); xhr.addEventListener('load', () => { // Does not work! data = JSON.parse(this.responseText); createTable(outputId, animal); }); xhr.send(); } </pre> <pre> Uncaught SyntaxError: Unexpected token u in JSON at position 0 </pre> <pre> function loadData(animal, outputId){ const xhr = new XMLHttpRequest(); xhr.open('GET', `${animal}Products.json`); xhr.addEventListener('load', function() { // Does work! data = JSON.parse(this.responseText); createTable(outputId, animal); }); xhr.send(); } </pre> </section> <section> <h4>SASS</h4> <p>Today was the first day that I have worked in SASS.</p> <ul> <li>@mixin creates a function. Refer to it with @include.</li> <li>@import imports another sass file.</li> <li>& refers to this. $:hover</li> <li>% creates a function whose values cannot be changed.</li> </ul> </section> <section> <h4>Javascript Sort</h4> <p>To sort an array from largest to smallest, I see the below a lot on Google. </p> <pre> [34, 24, 29, 3].sort(function(a, b){return b - a}); </pre> <p>After Joe Shepherd, the NSS instructor explained it, it looks like .sort feeds 34 and 24 as a and b, and returns the subtracted value of 10. 10 would mean that the second number is smaller than the first, so 24 would go after 34. It repeats this until the numbers are greatest to smallest. The next two numbers would be 24 and 29, which would return -5, so .sort would put 29 before 24.</p> </section> <section> <h4>Cool Things</h4> <p>Joe Shepherd, the NSS instructor, showed use the below code to augment a module. The part I am intiuged by is the (tree || {}) statment at the bottom. Meaning, if tree is false (it is undefined) then use an empty object as the argument, otherwise use tree. This works, because if tree is undefined, it returns false.</p> <p>The fact that tree returns false if undefined interests me. This is a basic building block in Javascript, and something that I would not have come up with by myself. It makes me look at other syntax I take for granted, like an IIFE stament being enclosed in parenthesis in this example <span class='code'>(function() { alert('hey!'); })();</span> The parenthesis aren't just arbitrary syntax used to say 'hey! This is an IIFE!' They are a basic building block, serving a basic function, used to create this IIFE statment. </p> <p>The primary way it occurs to me to use it right now would be with function arguments. If x isn't provided, then do this. But I think there is other ways that this could be utilized. </p> <pre> var tree = (function(originalTree) { let randomVar = 'protected'; originalTree.outputToDOM = () => { let myTree = tree.getTreeSpecies(); document.getElementById('myTree').innerHTML = `My fave tree is a ${ myTree } tree`; }; return originalTree; })(tree || {}); </pre> </section> <section> <h4>Questions</h4> <ul> <li>Research Execution Context to have a greater understanding of <i>this</i> when using arrow functions.</li> </ul> </section> </article>"
        },
        {
            "title": "Class Topic: Boostrap",
            "date": "6 December 2017",
            "content": " </article> <section> <h4>Spread Operator (...)</h4> <p>Today in class, Joe Shepherd showed us the spread operator. It expands a string, or an html collection, into an array.</p> <pre>[...objectToTurnIntoArray]</pre> </section> <section> <h4>Bootstrap</h4> <p>When using sm, lg, or xd, in boostrap, they go after the variable but before the value. Example: flex-collumn. Flex would be the variable we are setting, and column is the value. So, to say you only want flex column at sm and below, you'd write flex-sm-column.</p> </section> <article>"
        }
    ]
}